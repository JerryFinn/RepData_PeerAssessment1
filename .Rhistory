1/.5
1/8
(1/3) * 0 + (2/3) * ((3-0)/3)
(1/3) * 0 + (2/3) * ((3-0)/2)
5/25
5/48
5/4
integrand <- function(x) {x/(x+1)}
integrate(integrand, lower = 0, upper = 0)
integrate(integrand, lower = 0, upper = 2)
2^(-1)
2^(-2)
integrand <- function(x) {1/(x)}
integrate(integrand, lower = 0, upper = 1)
integrand <- function(x) {1/(x)}
integrate(integrand, lower = 0, upper = 1)
1 - .8944
.9772 - (1 - .8413)
9/16 # var
3/8
9/32
1/1600
1/16
1/18
9/16 # var
(1-.6293)
0.6293 -.5
(.75 - 0) / 2 # z value
1 - 6480
1 - .6480
-1.25/2
1 - .8944
1 - .7734
swirl()
library(swirl)
swirl()
27/36
1 - (2+1)/36
deck
52
5/52
4/52
0
12/52
3/51
2/51
.8 * 1.6
(.8 * 1.6) / 2
(.8 * 1.6)
((.8 * 1.6) / 2) / (2/2)
mypdf
mypdf(x/2, lower=0, upper=1.6)
mypdf(lower=0, upper=1.6)
mypdf(lower=0, upper=1.6)
mypdf(0)
integrate(mypdf, 0, 1.6)
1
2
sqrt(2)
.001 * .997
.985 * (1- .001)
(1- .985) * (1- .001)
0.984015 / 0.014985
(.001 * .997) / (.001 * .997 + (1- .985) * (1- .001))
3.5
expected_dice
expect_dice
dice_high
expect_dice(dice_high)
expect_dice(dice_low)
.5 * (edh + edl)
integrate(myfunc, 0, 2)
spop
mean(spop)
allsum
allsam
apply(allsam, 1, mean)
mean(smeans)
exit
(3/6) * (1/6) + (2/6) * (3/6)
library(swirl)
swirl()
dice_sqr
dice_fair * dice_sqr
ex2_fair <- dice_fair * dice_sqr
ex2_fair <- sum(dice_fair * dice_sqr)
ex2_fail - 3.5^2
ex2_fair - (3.5)^2
ex2_fair-3.5^2
sum(dice_high * dice_sqr)-edh^2
sd(apply(matrix(rnorm(10000),1000),1,mean))
1/sqrt(10)
1/sqrt(120)
sd(apply(matrix(runif(10000),1000),1,mean))
2/sqrt(10)
sd(apply(matrix(rpois(10000,4),1000),1,mean))
17(2*sqrt(10))
1/(2*sqrt(10))
sd(apply(matrix(sample(0:1,10000,TRUE),1000),1,mean))
choose(5,3) * .8^3 * ((1-.8)^(5-3))
choose(5,3)*(.8)^3*(.2)^(5-3)
choose(5,3)*(.8)^3*(.2)^(5-3) + choose(5,4)*(.8)^4*(.2)^(5-4) + choose(5,5)*(.8)^5*(.2)^(5-5)
pbinom(2, size = 5, prob =.8, lower.tail = FALSE)
qnorm(10)
qnorm(.1)
0
qnorm(.975, 3, 2)
3 + 2*1.96
pnorm(1200, 1020, 50, lower.tail = FALSE)
pnorm(1200, 1020, 50, lower.tail = FALSE)
pnorm((1200-1020)/50,lower.tail=FALSE)
pnorm((1200-1020)/50,lower.tail=FALSE)
qnorm(.75,mean=1020,sd=50)
.53
.53
ppois(3, lamda = 2.5 * 4)
ppois(3, lambda = 2.5 * 4)
pbinom(5, 1000, .01)
ppois(5, lambda = 1000 * .01)
coinPlot(10)
coinPlot(1000)
coinPlot(10000)
qnorm(.95)
.55 +c(-1,1) * qnorm(0.975) * sqrt(0.55*.65/100)
.6 + c(-1,1)*qnorm(.975)*sqrt(.6*.4/100)
binom.test(.6,100)$conf.int
binom.test(60,100)$conf.int
mywald(.2)
ACCompar(20)
lamb<-5/94.32
lamb + c(-1,1)*qnorm(.975)*sqrt(lamb/94.32)
poisson.test(5, 95.32)$conf
poisson.test(5,94.32)$conf
pnorm(70, mean = 80, sd = 10)
qnorm(0.95, mean = 1100, sd = 75)
qnorm(0.95, mean = 1100, sd = 75 / sqrt(100))
1 - pbinom(3, size=5, prob=0.5)
pbinom(4, size = 5, prob = 0.5, lower.tail = FALSE)
round(pbinom(3, size = 5, prob = 0.5, lower.tail = FALSE) * 100, 1) # correct
round(pbinom(4, size = 6, prob = 0.5, lower.tail = FALSE) * 100, 1) # correct
pbinom(4, size = 5, prob = 0.5, lower.tail = FALSE)
round(pbinom(3, size = 5, prob = 0.5, lower.tail = FALSE) * 100, 1) # correct
1 - pbinom(3, size=5, prob=0.5)
round(pbinom(3, size = 5, prob = 0.5, lower.tail = FALSE) * 100, 1) # correct
pbinom(3, size=5, prob=0.5)
pnorm(16, 15, SE) - pnorm(14, 15, SE)
x <- 15
sdlam <- 10
SE <- sdlam/sqrt(100)
pnorm(16, 15, SE) - pnorm(14, 15, SE)
mu <- 15
sdlam <- 10
SE <- sdlam/sqrt(100)
pnorm(16, mu, SE) - pnorm(14, mu, SE)
sdunif <- 1/sqrt(12*1000)
sdunif
mu <- .5
var7 <- 1/12
sdunif <- 1/sqrt(12*1000)
ppois(10, lambda = 5 * 3)
6 * 1 + (-8 * 5) + (3 * 5) + (-4 * 5)
3/sqrt(15)
6/(sqrt(6) * sqrt(4))
-6/(sqrt(6) * sqrt(4))
1/12
(1 - 9/16)^2
(1/2 - 9/16)^2
1/12
sqrt(3/12) * (1- sqrt(3/12))
1/3 - sqrt(3/12)
1/3 - 3/12
1/3 - 5/12
200 * (1/3)
/(40 + 50 + 60) * 10)/30
((40 + 50 + 60) * 10)/30
(1/3) * (5 + 10 + 15)
varE <- 200 * (1/3)
Evar <- (1/3) * (5 + 10 + 15)
varE + Evar
varX
-6/(sqrt(6) * sqrt(4))
x <- c(1:25)
sum(x^2)
sum(x^2) / 25
sum((x-9)^2)
exp(-2)
exp(0)
exp(-2)
exp(-1)
exp(0)
exp(1)
1/6
1/3
1/3
(1-(1/3)) / (p^2)
(1-(1/3)) / ((1/3)^2)
(1- (1/3))
swirl()
library(swirl)
swirl()
pt(2.5, 15, lower.tail = FALSE)
qnorm(.95)
qnorm(.99)
pt(2)
qnorm(2)
pnorm(2)
pnorm(2, lower.tail = FALSE)
mybin
pbinom(6, size=8, prob=.5, lower.tail=FALSE)
pbinom(7, size=8, prob=.5, lower.tail=TRUE)
ppois(9, 5, lower.tail = FALSE)
exit
((1/12) + (1/2)^2) * 0.5
((1/12) + (1/2)^2) * 2
1/8
(1/3) - (1/2)
integrate(integrand, lower = 0, upper = 1)  # can use inf for infinity
integrand <- function(x) {(3 * x^2) * (1 - x)}
integrate(integrand, lower = 0, upper = 1)  # can use inf for infinity
12* (.5^2) * (1-.5)
sqrt(.5)
.5 * .25 * .125
(1/3)^3
2 / 5
.4 * 1/3
.4 * (1/3)
1 - (.4 * (1/3))
(1/3) / (2/3)
swirl()
library(swirl)
swirl()
3.5
print(g2)
head(sh)
nh
median(resampledMedians)
median(sh)
sam <- sample(fh, nh*B, replace=TRUE)
matrix(sam, B, nh)
resam <- matrix(sam, B, nh)
mdes <- apply(resam, 1, median)
meds <- apply(resam,1,median)
median(fh) - median(meds)
sd(meds)
sd(resampledMedians) / sqrt(nh)
sd(resampledMedians)
quantil(resampledMedians, c(.025,.975))
quantile(resampledMedians, c(.025,.975))
quantile(meds, c(.025,.975))
dim(InsectSprays)
names(InsectSprays)
range(Bdata$count)
range(Cdata$count)
BCcounts
group
testStat
obs <- testStat(BCcounts, group)
obs
mean(Bdata$count-Cdata$count)
sample(group)
perms <- <- sapply(1 : 10000, function(i) testStat(BCcounts, sample(group)))
perms <- sapply(1 : 10000, function(i) testStat(BCcounts, sample(group)))
mean(perms > obs)
testStat(DEcounts, group)
perms <- sapply(1 : 10000, function(i) testStat(DEcounts, sample(group)))
b <- c(140, 138, 150, 148, 135)
w2 <- c(132, 135, 151, 146, 130)
t.test(b - w2)
t.test(b - w2, paired = TRUE)
mu <- 1100
sd1 <- 30
n  <- 9
mu + c(-1, 1) * qt(.975, n -1) * sd1 /sqrt(n)
binom.test(3, 4)
(ppois(10, lamda = 100 * 17.84)
)
pois(10, lamda = 100 * 17.84)
ppois(10, lamda = 100 * 17.84)
ppois(10, lambda = 100 * 17.84)
power.t.test(n=100, delta = , sd = .01, sig.level = 0.05, type = one.sample, alt = one.sided)
power.t.test(n=100, sd = .01, sig.level = 0.05, type = one.sample, alt = one.sided)
power.t.test(n=100, delta = NULL; sd = .01, sig.level = 0.05, type = one.sample, alt = one.sided)
power.t.test(n=100, delta = NULL, sd = .01, sig.level = 0.05, type = one.sample, alt = one.sided)
power.t.test(n=100, delta = NULL , sd = .01, sig.level = 0.05, type = one.sample, alt = one.sided)
power.t.test(n=100, delta = .01 , sd = .04, type = one.sample, alt = one.sided)
power.t.test(n=100, delta = .01 , sd = .04, type = "one.sample", alt = one.sided)
n <- 100
mn <- .01
sd1 <- .04
n <- 100
mn <- .01
sd1 <- .04
power.t.test(n=100, delta = .01 , sd = .04, type = "one.sample", alt = one.sided)
power.t.test(n=100, delta = .01 , sd = .04, type = "one.sample", alt = "one.sided")
power.t.test(delta = .01 , sd = .04, power = .9, type = "one.sample", alt = "one.sided")
qt(.975, 8)
t.test(-3, 1, paired=FALSE, var.equal = TRUE)
t.test(mu = -3 - 1, paired=FALSE, var.equal = TRUE)
(-3 - 1) / sqrt((1.5^2/9) + (1.8^2/9))
poisson.test(1,100)
poisson.test(10,1787)
8/3
1/3 -2 + 9
1/18
activity <- read.csv("D:/Jerry_docs/Stats/CourseraBigData/ReproducibleResearch/activity.csv", stringsAsFactors=FALSE)
View(activity)
setwd("D:/Jerry_docs/Stats/CourseraBigData/ReproducibleResearch/RepData_PeerAssessment1")
summary(activity)
activity <- read.csv("D:/Jerry_docs/Stats/CourseraBigData/ReproducibleResearch/activity.csv", stringsAsFactors=FALSE)
View(activity)
activity$date <- as.data(activity$date)
activity$date <- as.date(activity$date)
activity$date <- as.Date(activity$date)
any(is.na(activity$steps))
summary(activity)
View(activity)
str(activityÃ§)
str(activity)
activity <- read.csv("./activity.csv", stringsAsFactors=FALSE)
str(activity)
activity$date <- as.Date(activity$date)
str(activity)
activity %>% group_by(date)
summarize(steps=sum(steps, na.rm = TRUE))
library(dplyr)
activity %>% group_by(date)
summarize(steps=sum(steps, na.rm = TRUE))
activity %>% group_by(date)
%>% summarize(steps=sum(steps, na.rm = TRUE))
activity %>% group_by(date) %>% summarize(steps=sum(steps, na.rm = TRUE))
View(activity)
act2 <- activity %>% group_by(date) %>% summarize(steps=sum(steps, na.rm = TRUE))
View(act2)
ggplot(date, steps, data = act2 )
library(ggplot2)
ggplot(date, steps, data = act2 )
ggplot(NULL, aes(x=date, y=steps, data = act2 ))
ggplot(NULL, aes(x=date, y=steps, data = act2 )) + geom_histogram(colour="blue", fill="grey")
ggplot(act2, aes(x=date, y=steps )) + geom_histogram(binwidth = 1 )
ggplot(act2, aes(x=date )) + geom_histogram(binwidth = 1 )
ggplot(act2, aes(x=steps )) + geom_histogram(binwidth = 1 )
ggplot(act2, aes(x=date )) + geom_histogram() )
ggplot(act2, aes(x=date )) + geom_histogram()
ggplot(act2, aes(x=steps )) + geom_histogram()
ggplot(act2, aes(x=steps )) + geom_histogram(colour="blue")
summary(act2)
str(act2)
ggplot(act2, aes(x=steps )) + geom_histogram(colour="blue", binwidth = 100)
ggplot(act2, aes(x=steps )) + geom_histogram(colour="blue", binwidth = 1000)
ggplot(act2, aes(x=steps )) + geom_histogram(colour="blue", binwidth = 5000)
ggplot(act2, aes(x=steps )) + geom_histogram(colour="blue", binwidth = 2000)
ggplot(act2, aes(x=steps )) + geom_histogram(colour="blue", binwidth = 1000)
ggplot(act2, aes(x=steps )) + geom_histogram(colour="blue", binwidth = 1000, ...density...)
ggplot(act2, aes(x=steps )) + geom_histogram(colour="blue", binwidth = 1000, y=..density..)
ggplot(act2, aes(x=steps )) + geom_histogram(..density.., colour="blue", binwidth = 1000)
ggplot(act2, aes(x=steps )) + geom_histogram(colour="blue", binwidth = 1000)
g <- ggplot(act2, aes(x=steps )) + geom_histogram(colour="blue", binwidth = 1000)
a_mean <- mean(act2$steps)
a_median <- median(act2$steps)
g + geom_vline(aes(xintercept = a_mean,color="mean"))
g <- g + geom_vline(aes(xintercept = a_mean,color="mean"))
g + geom_vline(aes(xintercept = a_median,color="median"))
g <- ggplot(act2, aes(x=steps )) + geom_histogram(colour="blue", binwidth = 1000)
g <- g + geom_vline(aes(xintercept = a_mean,color="mean"))
g <- g + geom_vline(aes(xintercept = a_median,color="median"))
g + ggtitle("Part 2 - Hist with Mean, Median")
a_mean; a_median
act3 <- activity %>% group_by(interval) %>% summarize(steps=mean(steps, na.rm=TRUE))
View(act3)
ggplot(act3, aes(interval, steps)) + geom_line() +
+ xlab("Every 5 minutes") + ylab("Steps")
ggplot(act3, aes(interval, steps)) + geom_line()
+ xlab("Every 5 minutes") + ylab("Steps")
act3 <- activity %>% group_by(interval) %>% summarize(steps=mean(steps, na.rm=TRUE))
ggplot(act3, aes(interval, steps)) + geom_line()
+ xlab("Every 5 minutes") + ylab("Steps") + ggtitle("Daily Walking Pattern")
ggplot(act3, aes(interval, steps)) + geom_line() + ggtitle("Daily Walking Pattern")
ggplot(act3, aes(interval, steps)) + geom_line() + ggtitle("Daily Walking Pattern") + xlab("Every 5 minutes") + ylab("Steps")
ggplot(act3, aes(interval, steps)) + geom_line()
+ ggtitle("Daily Walking Pattern") + xlab("Every 5 minutes") + ylab("Steps")
ggplot(act3, aes(interval, steps)) + geom_line(colour="blue")
+ ggtitle("Daily Walking Pattern") + xlab("Every 5 minutes") + ylab("Steps")
ggplot(act3, aes(interval, steps)) + geom_line(colour="blue") + ggtitle("Daily Walking Pattern") + xlab("Every 5 minutes") + ylab("Steps")
g <- ggplot(act3, aes(interval, steps)) + geom_line(colour="blue")
g + ggtitle("Daily Walking Pattern") + xlab("Every 5 minutes") + ylab("Steps")
max(act3$steps)
act3[act3$steps==max(act3$steps)]
act3[act3$steps==max(act3$steps),]
act3$interval[act3$steps==max(act3$steps),]
act3$interval[act3$steps==max(act3$steps)]
a_max <- act3$interval[act3$steps==max(act3$steps)]
g <- ggplot(act3, aes(interval, steps)) + geom_line(colour="blue")
g + geom_vline(aes(xintercept = a_max,color="mean"))
act3 <- activity %>% group_by(interval) %>% summarize(steps=mean(steps, na.rm=TRUE))
a_max <- act3$interval[act3$steps==max(act3$steps)]
g <- ggplot(act3, aes(interval, steps)) + geom_line(colour="blue")
g <- g + geom_vline(aes(xintercept = a_max,color="max"))
g + ggtitle("Daily Walking Pattern") + xlab("Every 5 minutes") + ylab("Steps")
activity <- read.csv("./activity.csv", stringsAsFactors=FALSE) # strings not factors as an easier way to conver to date
activity$date <- as.Date(activity$date)
activity$interval <- as.factor(activity$interval)
library(dplyr)
library(ggplot2)
act3 <- activity %>% group_by(interval) %>% summarize(steps=mean(steps, na.rm=TRUE))
a_max <- act3$interval[act3$steps==max(act3$steps)]
g <- ggplot(act3, aes(interval, steps)) + geom_line(colour="blue")
g <- g + geom_vline(aes(xintercept = a_max,color="max"))
g + ggtitle("Daily Walking Pattern") + xlab("Every 5 minutes") + ylab("Steps")
g <- ggplot(act3, aes(interval, steps)) + geom_line(colour="blue")
g <- g + geom_vline(aes(xintercept = a_max,color="max"))
g + ggtitle("Daily Walking Pattern") + xlab("Every 5 minutes") + ylab("Steps")
g <- ggplot(act3, aes(interval, steps)) + geom_line(colour="blue")
g <- g + geom_vline(aes(xintercept = a_max,color="max"))
g
g <- ggplot(act3, aes(interval, steps)) + geom_line(colour="blue")
g
act3 <- activity %>% group_by(interval) %>% summarize(steps=mean(steps, na.rm=TRUE))
g <- ggplot(act3, aes(interval, steps)) + geom_line(colour="blue")
g <- ggplot(act3, aes(interval, steps)) + geom_line(colour="blue")
g <- g + ggtitle("Daily Walking Pattern") + xlab("Every 5 minutes") + ylab("Steps")
g
rm(a_max)
g <- ggplot(act3, aes(interval, steps)) + geom_line(colour="blue")
g <- g + ggtitle("Daily Walking Pattern") + xlab("Every 5 minutes") + ylab("Steps")
g
g <- ggplot(act3, aes(interval, steps)) + geom_point()
g <- g + ggtitle("Daily Walking Pattern") + xlab("Every 5 minutes") + ylab("Steps")
g
g <- ggplot(act3, aes(interval, steps)) + geom_bar()
g <- g + ggtitle("Daily Walking Pattern") + xlab("Every 5 minutes") + ylab("Steps")
g
g <- ggplot(act3, aes(interval, steps)) + geom_path()
g <- g + ggtitle("Daily Walking Pattern") + xlab("Every 5 minutes") + ylab("Steps")
g
g <- ggplot(act3, aes(interval, steps)) + geom_linerange()
g <- g + ggtitle("Daily Walking Pattern") + xlab("Every 5 minutes") + ylab("Steps")
g
g <- ggplot(act3, aes(interval, steps)) + geom_line()
g <- g + ggtitle("Daily Walking Pattern") + xlab("Every 5 minutes") + ylab("Steps")
g
g <- ggplot(act3, aes(interval, steps)) + geom_dotplot()
g <- g + ggtitle("Daily Walking Pattern") + xlab("Every 5 minutes") + ylab("Steps")
g
g <- ggplot(act3, aes(interval, steps)) + geom_point()
g <- g + ggtitle("Daily Walking Pattern") + xlab("Every 5 minutes") + ylab("Steps")
g
g <- ggplot(act3, aes(interval, steps)) + geom_point() + geom_line()
g <- g + ggtitle("Daily Walking Pattern") + xlab("Every 5 minutes") + ylab("Steps")
g
g <- ggplot(act3, aes(interval, steps)) + geom_point() + geom_bar()
g <- g + ggtitle("Daily Walking Pattern") + xlab("Every 5 minutes") + ylab("Steps")
g
g <- ggplot(act3, aes(interval, steps)) + geom_point()
g <- g + ggtitle("Daily Walking Pattern") + xlab("Every 5 minutes") + ylab("Steps")
g
g <- g + geom_vline(aes(xintercept = a_max,color="max"))
g
g <- ggplot(act3, aes(interval, steps)) + geom_point()
g <- g + ggtitle("Daily Walking Pattern") + xlab("Every 5 minutes") + ylab("Steps")
g <- g + geom_vline(aes(xintercept = a_max,color="max"))
g
a_max <- act3$interval[act3$steps==max(act3$steps)]
g <- ggplot(act3, aes(interval, steps)) + geom_point()
g <- g + ggtitle("Daily Walking Pattern") + xlab("Every 5 minutes") + ylab("Steps")
g <- g + geom_vline(aes(xintercept = a_max,color="max"))
g
```
str(act3)
act3 <- activity %>% group_by(interval) %>% summarize(steps=mean(steps, na.rm=TRUE))
act3$interval <- as.numeric(as.character(act3$interval))
a_max <- act3$interval[act3$steps==max(act3$steps)]
#g <- ggplot(act3, aes(interval, steps)) + geom_line(colour="blue")
g <- ggplot(act3, aes(interval, steps)) + geom_point()
g <- g + ggtitle("Daily Walking Pattern") + xlab("Every 5 minutes") + ylab("Steps")
g <- g + geom_vline(aes(xintercept = a_max,color="max"))
g
a_max
g <- ggplot(act3, aes(interval, steps)) + geom_line(colour="blue")
g <- g + ggtitle("Daily Walking Pattern") + xlab("Every 5 minutes") + ylab("Steps")
g <- g + geom_vline(aes(xintercept = a_max,color="max"))
g
g <- ggplot(act3, aes(interval, steps)) + geom_line(colour="blue")
activity[,inter_mu:= mean(steps), by=interval]
library(data.table)
install.packages("data.table")
library(data.table)
activity[,inter_mu:= mean(steps), by=interval]
activity[,inter_mu:= mean(steps)]
activity[,inter_mu:= mean(steps), by=interval]
view(activity)
View(activity)
mean(activity$steps[activity$interval==0])
mean(activity$steps[activity$interval==0], rm.na=TRUE)
mean(activity$steps[activity$interval==5], rm.na=TRUE)
DT <- data.table(activity)
DT[,inter_mu:= mean(steps), by=interval]
View(DT)
DT[,inter_mu:= mean(steps, rm.na=TRUE), by=interval]
DT[,inter_mu:= mean(steps, na.rm=TRUE), by=interval]
View(DT)
DT[steps==NA]
DT[steps==NA,]
DT[DT$steps==NA]
DT[is.na(DT$steps)]
library(data.table)
DT$steps[is.na(DT$steps)] <- round(DT$inter_mu)
str(DT)
library(data.table)
DT <- data.table(activity)
DT[,inter_mu:= mean(steps, na.rm=TRUE), by=interval]
DT$steps[is.na(DT$steps)] <- round(DT$inter_mu)
View(DT)
